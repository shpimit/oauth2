--drop table if exists user CASCADE;
create table IF NOT EXISTS user
(
    id bigint generated by default as identity,
    username varchar(255) not null,
    password varchar(255) not null,
    active int(20),
    roles varchar(255),
    permissions varchar(255) not null,
    user_type int(10),
    createdate date,
    primary key (id)
);

insert into user (id ,username, password,active, roles, permissions, user_type, createdate ) values (1, 'hae', '{bcrypt}$2a$10$iVO0ByxuA74V1Ud9HZaHEuvzfcEuVtTxGZvarL8wMbgsgTjWev2MO',1,'ROLE_ADMIN','ACCESS_TEST1',  1, sysdate);
insert into user (id ,username, password,active, roles, permissions, user_type, createdate ) values (2, 'sunho', '{bcrypt}$2a$10$Vq5DCxpMHJCVF9YhdttIl.BvyrUX1vxXflpKM1ejK8ZDyjsQytHyG',1,'ROLE_USER',' ', 0, sysdate);

create table IF NOT EXISTS oauth_client_details (
    client_id VARCHAR(256) PRIMARY KEY,
    resource_ids VARCHAR(256),
    client_secret VARCHAR(256),
    scope VARCHAR(256),
    authorized_grant_types VARCHAR(256),
    web_server_redirect_uri VARCHAR(256),
    authorities VARCHAR(256),
    access_token_validity INTEGER,
    refresh_token_validity INTEGER,
    additional_information VARCHAR(4096),
    autoapprove VARCHAR(256)
);

create table IF NOT EXISTS oauth_client_token (
    token_id VARCHAR(256),
    token LONGVARBINARY,
    authentication_id VARCHAR(256) PRIMARY KEY,
    user_name VARCHAR(256),
    client_id VARCHAR(256)
);

create table IF NOT EXISTS oauth_access_token (
    token_id VARCHAR(256),
    token LONGVARBINARY,
    authentication_id VARCHAR(256) PRIMARY KEY,
    user_name VARCHAR(256),
    client_id VARCHAR(256),
    authentication LONGVARBINARY,
    refresh_token VARCHAR(256)
);

create table IF NOT EXISTS oauth_refresh_token (
    token_id VARCHAR(256),
    token LONGVARBINARY,
    authentication LONGVARBINARY
);

create table IF NOT EXISTS oauth_code (
    code VARCHAR(256), authentication LONGVARBINARY
);

create table IF NOT EXISTS oauth_approvals (
    userId VARCHAR(256),
    clientId VARCHAR(256),
    scope VARCHAR(256),
    status VARCHAR(10),
    expiresAt TIMESTAMP,
    lastModifiedAt TIMESTAMP
);

delete OAUTH_CLIENT_DETAILS;

insert into oauth_client_details (
    client_id
    ,resource_ids
    ,client_secret
    ,scope
    ,authorized_grant_types
    ,web_server_redirect_uri
    ,authorities
    ,access_token_validity
    ,refresh_token_validity
    ,additional_information
    ,autoapprove
) values (
    'gvpro'
    ,null
    ,'{bcrypt}$2a$10$z8t6fPDMwOiJt2BJ22Ei8eOnRaE0tegHNvtPjOCUINPGYNS4eBEzW'
    ,'read,write'
    ,'authorization_code,password,refresh_token'
    ,'http://localhost:8080/oauth2/callback'
    ,'ROLE_USER'
    ,36000
    ,50000
    ,null
    ,null
);

CREATE TABLE IF NOT EXISTS SPRING_SESSION (
    PRIMARY_ID CHAR(36) NOT NULL,
    SESSION_ID CHAR(36) NOT NULL,
    CREATION_TIME BIGINT NOT NULL,
    LAST_ACCESS_TIME BIGINT NOT NULL,
    MAX_INACTIVE_INTERVAL INT NOT NULL,
    EXPIRY_TIME BIGINT NOT NULL,
    PRINCIPAL_NAME VARCHAR(100),
    CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
);

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);
CREATE INDEX SPRING_SESSION_IX4 ON SPRING_SESSION (LAST_ACCESS_TIME);

CREATE TABLE IF NOT EXISTS SPRING_SESSION_ATTRIBUTES (
   SESSION_PRIMARY_ID CHAR(36) NOT NULL,
   ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
   ATTRIBUTE_BYTES LONGVARBINARY NOT NULL,
   CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
   CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);

CREATE INDEX SPRING_SESSION_ATTRIBUTES_IX1 ON SPRING_SESSION_ATTRIBUTES (SESSION_PRIMARY_ID);
